"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toInputObjectType = toInputObjectType;
exports.convertInputObjectField = convertInputObjectField;

var _util = _interopRequireDefault(require("util"));

var _graphql = require("../graphql");

var _ObjectTypeComposer = require("../ObjectTypeComposer");

var _generic = _interopRequireDefault(require("../type/generic"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function toInputObjectType(tc, opts = {}) {
  if (tc.hasInputTypeComposer()) {
    return tc.getInputTypeComposer();
  }

  const prefix = opts.prefix || '';
  const postfix = opts.postfix || 'Input';
  const inputTypeName = `${prefix}${tc.getTypeName()}${postfix}`;
  const inputTypeComposer = tc.schemaComposer.createInputTC({
    name: inputTypeName,
    fields: {}
  });
  tc.setInputTypeComposer(inputTypeComposer);
  const fieldNames = tc.getFieldNames();
  const inputFields = {};
  fieldNames.forEach(fieldName => {
    const fieldOpts = _objectSpread({}, opts, {
      fieldName,
      outputTypeName: tc.getTypeName()
    });

    const fc = tc.getFieldConfig(fieldName);
    const inputType = convertInputObjectField(fc.type, fieldOpts, tc.schemaComposer);

    if (inputType) {
      inputFields[fieldName] = {
        type: inputType,
        description: fc.description
      };
    }
  });
  inputTypeComposer.addFields(inputFields);
  return inputTypeComposer;
}

function convertInputObjectField(field, opts, schemaComposer) {
  let fieldType = field;
  const wrappers = [];

  while (fieldType instanceof _graphql.GraphQLList || fieldType instanceof _graphql.GraphQLNonNull) {
    wrappers.unshift(fieldType.constructor);
    fieldType = fieldType.ofType;
  }

  if (fieldType instanceof _graphql.GraphQLUnionType) {
    return null;
  }

  if (!(0, _graphql.isInputType)(fieldType)) {
    if (fieldType instanceof _graphql.GraphQLObjectType || fieldType instanceof _graphql.GraphQLInterfaceType) {
      const typeOpts = {
        prefix: opts.prefix || '',
        postfix: opts.postfix || 'Input'
      };
      const tc = fieldType instanceof _graphql.GraphQLObjectType ? schemaComposer.createObjectTC(fieldType) : schemaComposer.createInterfaceTC(fieldType);
      fieldType = toInputObjectType(tc, typeOpts).getType();
    } else {
      // eslint-disable-next-line
      console.error(`graphql-compose: can not convert field '${opts.outputTypeName || ''}.${opts.fieldName || ''}' to InputType` + '\nIt should be GraphQLObjectType or GraphQLInterfaceType, but got \n' + _util.default.inspect(fieldType, {
        depth: 2,
        colors: true
      }));
      fieldType = _generic.default;
    }
  }

  const inputFieldType = wrappers.reduce((type, Wrapper) => new Wrapper(type), fieldType);
  return inputFieldType;
}