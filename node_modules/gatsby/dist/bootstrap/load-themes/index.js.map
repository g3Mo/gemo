{"version":3,"sources":["../../../src/bootstrap/load-themes/index.js"],"names":["path","require","mergeGatsbyConfig","Promise","_","debug","preferDefault","getConfigFile","reporter","resolveTheme","themeSpec","configFileThatDeclaredTheme","isMainConfig","themeName","resolve","themeDir","dirname","e","pathToLocalTheme","join","localErr","nodeResolutionPaths","module","paths","map","p","panic","id","context","configFilePath","configModule","theme","themeConfig","isFunction","options","processTheme","useLegacyThemes","themesList","__experimentalThemes","plugins","mapSeries","spec","themeObj","then","arr","concat","exports","config","themesA","flattenDeep","reduce","newConfig","themes"],"mappings":"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","sourcesContent":["const path = require(`path`)\nconst mergeGatsbyConfig = require(`../../utils/merge-gatsby-config`)\nconst Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst debug = require(`debug`)(`gatsby:load-themes`)\nconst preferDefault = require(`../prefer-default`)\nconst getConfigFile = require(`../get-config-file`)\nconst reporter = require(`gatsby-cli/lib/reporter`)\n\n// get the gatsby-config file for a theme\nconst resolveTheme = async (\n  themeSpec,\n  configFileThatDeclaredTheme,\n  isMainConfig = false\n) => {\n  const themeName = themeSpec.resolve || themeSpec\n  let themeDir\n  try {\n    // theme is an node-resolvable module\n    themeDir = path.dirname(require.resolve(themeName))\n  } catch (e) {\n    let pathToLocalTheme\n\n    // only try to look for local theme in main site\n    // local themes nested in other themes is potential source of problems:\n    // because those are not hosted by npm, there is potential for multiple\n    // local themes with same name that do different things and name being\n    // main identifier that gatsby uses right now, it's safer not to support it for now.\n    if (isMainConfig) {\n      pathToLocalTheme = path.join(path.resolve(`.`), `plugins`, themeName)\n      // is a local plugin OR it doesn't exist\n      try {\n        themeDir = path.dirname(require.resolve(pathToLocalTheme))\n      } catch (localErr) {\n        // catch shouldn't be empty :shrug:\n      }\n    }\n\n    if (!themeDir) {\n      const nodeResolutionPaths = module.paths.map(p => path.join(p, themeName))\n      reporter.panic({\n        id: `10226`,\n        context: {\n          themeName,\n          configFilePath: configFileThatDeclaredTheme,\n          pathToLocalTheme,\n          nodeResolutionPaths,\n        },\n      })\n    }\n  }\n\n  const { configModule, configFilePath } = await getConfigFile(\n    themeDir,\n    `gatsby-config`\n  )\n  let theme = preferDefault(configModule)\n\n  // if theme is a function, call it with the themeConfig\n  let themeConfig = theme\n  if (_.isFunction(theme)) {\n    themeConfig = theme(themeSpec.options || {})\n  }\n  return { themeName, themeConfig, themeSpec, themeDir, configFilePath }\n}\n\n// single iteration of a recursive function that resolve parent themes\n// It's recursive because we support child themes declaring parents and\n// have to resolve all the way `up the tree` of parent/children relationships\n//\n// Theoretically, there could be an infinite loop here but in practice there is\n// no use case for a loop so I expect that to only happen if someone is very\n// off track and creating their own set of themes\nconst processTheme = (\n  { themeName, themeConfig, themeSpec, themeDir, configFilePath },\n  { useLegacyThemes }\n) => {\n  const themesList = useLegacyThemes\n    ? themeConfig && themeConfig.__experimentalThemes\n    : themeConfig && themeConfig.plugins\n  // gatsby themes don't have to specify a gatsby-config.js (they might only use gatsby-node, etc)\n  // in this case they're technically plugins, but we should support it anyway\n  // because we can't guarantee which files theme creators create first\n  if (themeConfig && themesList) {\n    // for every parent theme a theme defines, resolve the parent's\n    // gatsby config and return it in order [parentA, parentB, child]\n    return Promise.mapSeries(themesList, async spec => {\n      const themeObj = await resolveTheme(spec, configFilePath)\n      return processTheme(themeObj, { useLegacyThemes })\n    }).then(arr =>\n      arr.concat([{ themeName, themeConfig, themeSpec, themeDir }])\n    )\n  } else {\n    // if a theme doesn't define additional themes, return the original theme\n    return [{ themeName, themeConfig, themeSpec, themeDir }]\n  }\n}\n\nmodule.exports = async (\n  config,\n  { useLegacyThemes = false, configFilePath }\n) => {\n  const themesA = await Promise.mapSeries(\n    useLegacyThemes ? config.__experimentalThemes || [] : config.plugins || [],\n    async themeSpec => {\n      const themeObj = await resolveTheme(themeSpec, configFilePath, true)\n      return processTheme(themeObj, { useLegacyThemes })\n    }\n  ).then(arr => _.flattenDeep(arr))\n\n  // log out flattened themes list to aid in debugging\n  debug(themesA)\n\n  // map over each theme, adding the theme itself to the plugins\n  // list in the config for the theme. This enables the usage of\n  // gatsby-node, etc in themes.\n  return (\n    Promise.mapSeries(themesA, ({ themeName, themeConfig = {}, themeSpec }) => {\n      return {\n        ...themeConfig,\n        plugins: [\n          ...(themeConfig.plugins || []),\n          // theme plugin is last so it's gatsby-node, etc can override it's declared plugins, like a normal site.\n          { resolve: themeName, options: themeSpec.options || {} },\n        ],\n      }\n    })\n      /**\n       * themes resolve to a gatsby-config, so here we merge all of the configs\n       * into a single config, making sure to maintain the order in which\n       * they were defined so that later configs, like the user's site and\n       * children, can override functionality in earlier themes.\n       */\n      .reduce(mergeGatsbyConfig, {})\n      .then(newConfig => {\n        return {\n          config: mergeGatsbyConfig(newConfig, config),\n          themes: themesA,\n        }\n      })\n  )\n}\n"],"file":"index.js"}